name: Deploy

on:
  workflow_dispatch:
    inputs:
      image:
        description: "Full image ref (e.g. ghcr.io/<owner>/<repo>:<tag>), or just a tag like <sha> or run-12345"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NS: default
      
    steps:
       # 0) 准备 kubectl
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.2'

      - name: Assert kubeconfig secret exists
        run: |
          test -n "${{ secrets.KUBECONFIG_INLINE }}" || { echo "KUBECONFIG_B64 not set"; exit 1; }

      - name: Debug kubeconfig (safe)
        run: |
          echo "== Checking server address =="
          echo "${KUBECONFIG_INLINE}" | base64 -d | grep "server:"
          echo "== Checking contexts =="
          echo "${KUBECONFIG_INLINE}" | base64 -d | grep -E "current-context|name:"
          echo "== Showing first 10 lines =="
          echo "${KUBECONFIG_INLINE}" | base64 -d | head -n 10
        env:
          KUBECONFIG_INLINE: ${{ secrets.KUBECONFIG_INLINE }}
          
      - name: Write kubeconfig
        run: |
          set -euo pipefail
          mkdir -p ~/.kube
          echo "${KUBECONFIG_INLINE}" > base64 -d ~/.kube/config
          chmod 600 ~/.kube/config
          echo "== server =="
          kubectl config view --raw --minify | sed -n 's/^[[:space:]]*server:[[:space:]]*//p'
          
      - name: Check cluster
        run: |
          kubectl cluster-info
          kubectl get nodes    
          
      # 2) 解析镜像参数：支持“完整镜像地址”或“仅 tag”
      - name: Resolve IMAGE
        run: |
          REPO_LC="${GITHUB_REPOSITORY,,}"
          if echo "${{ inputs.image }}" | grep -q '/'; then
            echo "IMAGE=${{ inputs.image }}" >> $GITHUB_ENV
          else
            echo "IMAGE=ghcr.io/${REPO_LC}:${{ inputs.image }}" >> $GITHUB_ENV
          fi
          echo "Will deploy IMAGE=$IMAGE"
  
      # 2. Checkout resource code 
      - name: Checkout
        uses: actions/checkout@v4

      # 4) 安装 envsubst
      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base
      
      # 5) 渲染/准备清单（全部在 runner 临时目录进行，不落地 VPS）
      - name: Render manifests
        run: |
          mkdir -p /tmp/k8s
          # configmap / mysql 原样拷贝（如果不需要变量替换）
          cp Kubernetes/configmap.yaml /tmp/k8s/configmap.yaml
          cp Kubernetes/Freelancer-mysql.yaml /tmp/k8s/mysql.yaml
          # 渲染 app（替换 ${IMAGE}）
          export IMAGE="$IMAGE"
          envsubst < Kubernetes/Freelancer-app.yaml > /tmp/k8s/app.yaml
          echo "=== Rendered app.yaml ==="
          grep -n 'image:' /tmp/k8s/app.yaml || true

      - name: Debug NS
        run: |
          echo "Namespace value is: '$NS'"
    
      # 6) 直接在集群内创建/更新 Secret（不在 VPS 保留文件）
      - name: Upsert Secret (freelancer-secret)
        run: |
          kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"
          kubectl -n "$NS" create secret generic freelancer-secret \
            --from-literal=MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE }}" \
            --from-literal=MYSQL_USER="${{ secrets.MYSQL_USER }}" \
            --from-literal=MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
            --from-literal=MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl -n "$NS" apply -f 
      
      # 7) 直接 apply（无需上传到 VPS）
      - name: Apply manifests
        run: |
          set -euo pipefail
          kubectl -n "$NS" apply -f /tmp/k8s/configmap.yaml
          kubectl -n "$NS" apply -f /tmp/k8s/mysql.yaml
          kubectl -n "$NS" apply -f /tmp/k8s/app.yaml
          
      # 8) 等待就绪 & 输出状态
      - name: Wait for rollout
        run: |
          set -e
          # 这些资源名按你的实际为准
          kubectl -n "$NS" rollout status statefulset/mysql --timeout=180s || true
          kubectl -n "$NS" rollout status deployment/spring-freelancer --timeout=180s || true
          echo "---- pods ----"
          kubectl -n "$NS" get pods -o wide
          echo "---- pvc ----"
          kubectl -n "$NS" get pvc
